{"version":3,"names":[],"mappings":"","sources":["dashboard.js"],"sourcesContent":["//== Class definition\r\nvar Dashboard = function() {\r\n\r\n    //== Sparkline Chart helper function\r\n    var _initSparklineChart = function(src, data, color, border) {\r\n        if (src.length == 0) {\r\n            return;\r\n        }\r\n\r\n        var config = {\r\n            type: 'line',\r\n            data: {\r\n                labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\"],\r\n                datasets: [{\r\n                    label: \"\",\r\n                    borderColor: color,\r\n                    borderWidth: border,\r\n\r\n                    pointHoverRadius: 4,\r\n                    pointHoverBorderWidth: 12,\r\n                    pointBackgroundColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n                    pointBorderColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n                    pointHoverBackgroundColor: mUtil.getColor('danger'),\r\n                    pointHoverBorderColor: Chart.helpers.color('#000000').alpha(0.1).rgbString(),\r\n                    fill: false,\r\n                    data: data,\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: false,\r\n                },\r\n                tooltips: {\r\n                    enabled: false,\r\n                    intersect: false,\r\n                    mode: 'nearest',\r\n                    xPadding: 10,\r\n                    yPadding: 10,\r\n                    caretPadding: 10\r\n                },\r\n                legend: {\r\n                    display: false,\r\n                    labels: {\r\n                        usePointStyle: false\r\n                    }\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: true,\r\n                hover: {\r\n                    mode: 'index'\r\n                },\r\n                scales: {\r\n                    xAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Month'\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Value'\r\n                        },\r\n                        ticks: {\r\n                            beginAtZero: true\r\n                        }\r\n                    }]\r\n                },\r\n\r\n                elements: {\r\n                    point: {\r\n                        radius: 4,\r\n                        borderWidth: 12\r\n                    },\r\n                },\r\n\r\n                layout: {\r\n                    padding: {\r\n                        left: 0,\r\n                        right: 10,\r\n                        top: 5,\r\n                        bottom: 0\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return new Chart(src, config);\r\n    }\r\n\r\n    //== Daily Sales chart.\r\n    //** Based on Chartjs plugin - http://www.chartjs.org/\r\n    var dailySales = function() {\r\n        var chartContainer = $('#m_chart_daily_sales');\r\n\r\n        if (chartContainer.length == 0) {\r\n            return;\r\n        }\r\n\r\n        var chartData = {\r\n            labels: [\"Label 1\", \"Label 2\", \"Label 3\", \"Label 4\", \"Label 5\", \"Label 6\", \"Label 7\", \"Label 8\", \"Label 9\", \"Label 10\", \"Label 11\", \"Label 12\", \"Label 13\", \"Label 14\", \"Label 15\", \"Label 16\"],\r\n            datasets: [{\r\n                //label: 'Dataset 1',\r\n                backgroundColor: mUtil.getColor('success'),\r\n                data: [\r\n                    15, 20, 25, 30, 25, 20, 15, 20, 25, 30, 25, 20, 15, 10, 15, 20\r\n                ]\r\n            }, {\r\n                //label: 'Dataset 2',\r\n                backgroundColor: '#f3f3fb',\r\n                data: [\r\n                    15, 20, 25, 30, 25, 20, 15, 20, 25, 30, 25, 20, 15, 10, 15, 20\r\n                ]\r\n            }]\r\n        };\r\n\r\n        var chart = new Chart(chartContainer, {\r\n            type: 'bar',\r\n            data: chartData,\r\n            options: {\r\n                title: {\r\n                    display: false,\r\n                },\r\n                tooltips: {\r\n                    intersect: false,\r\n                    mode: 'nearest',\r\n                    xPadding: 10,\r\n                    yPadding: 10,\r\n                    caretPadding: 10\r\n                },\r\n                legend: {\r\n                    display: false\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                barRadius: 4,\r\n                scales: {\r\n                    xAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        stacked: true\r\n                    }],\r\n                    yAxes: [{\r\n                        display: false,\r\n                        stacked: true,\r\n                        gridLines: false\r\n                    }]\r\n                },\r\n                layout: {\r\n                    padding: {\r\n                        left: 0,\r\n                        right: 0,\r\n                        top: 0,\r\n                        bottom: 0\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    //== Profit Share Chart.\r\n    //** Based on Chartist plugin - https://gionkunz.github.io/chartist-js/index.html\r\n    var profitShare = function() {\r\n        if ($('#m_chart_profit_share').length == 0) {\r\n            return;\r\n        }\r\n\r\n        var chart = new Chartist.Pie('#m_chart_profit_share', {\r\n            series: [{\r\n                    value: 32,\r\n                    className: 'custom',\r\n                    meta: {\r\n                        color: mUtil.getColor('brand')\r\n                    }\r\n                },\r\n                {\r\n                    value: 32,\r\n                    className: 'custom',\r\n                    meta: {\r\n                        color: mUtil.getColor('accent')\r\n                    }\r\n                },\r\n                {\r\n                    value: 36,\r\n                    className: 'custom',\r\n                    meta: {\r\n                        color: mUtil.getColor('warning')\r\n                    }\r\n                }\r\n            ],\r\n            labels: [1, 2, 3]\r\n        }, {\r\n            donut: true,\r\n            donutWidth: 17,\r\n            showLabel: false\r\n        });\r\n\r\n        chart.on('draw', function(data) {\r\n            if (data.type === 'slice') {\r\n                // Get the total path length in order to use for dash array animation\r\n                var pathLength = data.element._node.getTotalLength();\r\n\r\n                // Set a dasharray that matches the path length as prerequisite to animate dashoffset\r\n                data.element.attr({\r\n                    'stroke-dasharray': pathLength + 'px ' + pathLength + 'px'\r\n                });\r\n\r\n                // Create animation definition while also assigning an ID to the animation for later sync usage\r\n                var animationDefinition = {\r\n                    'stroke-dashoffset': {\r\n                        id: 'anim' + data.index,\r\n                        dur: 1000,\r\n                        from: -pathLength + 'px',\r\n                        to: '0px',\r\n                        easing: Chartist.Svg.Easing.easeOutQuint,\r\n                        // We need to use `fill: 'freeze'` otherwise our animation will fall back to initial (not visible)\r\n                        fill: 'freeze',\r\n                        'stroke': data.meta.color\r\n                    }\r\n                };\r\n\r\n                // If this was not the first slice, we need to time the animation so that it uses the end sync event of the previous animation\r\n                if (data.index !== 0) {\r\n                    animationDefinition['stroke-dashoffset'].begin = 'anim' + (data.index - 1) + '.end';\r\n                }\r\n\r\n                // We need to set an initial value before the animation starts as we are not in guided mode which would do that for us\r\n\r\n                data.element.attr({\r\n                    'stroke-dashoffset': -pathLength + 'px',\r\n                    'stroke': data.meta.color\r\n                });\r\n\r\n                // We can't use guided mode as the animations need to rely on setting begin manually\r\n                // See http://gionkunz.github.io/chartist-js/api-documentation.html#chartistsvg-function-animate\r\n                data.element.animate(animationDefinition, false);\r\n            }\r\n        });\r\n\r\n        // For the sake of the example we update the chart every time it's created with a delay of 8 seconds\r\n        chart.on('created', function() {\r\n            if (window.__anim21278907124) {\r\n                clearTimeout(window.__anim21278907124);\r\n                window.__anim21278907124 = null;\r\n            }\r\n            window.__anim21278907124 = setTimeout(chart.update.bind(chart), 15000);\r\n        });\r\n    }\r\n\r\n    //== Sales Stats.\r\n    //** Based on Chartjs plugin - http://www.chartjs.org/\r\n    var salesStats = function() {\r\n        if ($('#m_chart_sales_stats').length == 0) {\r\n            return;\r\n        }\r\n\r\n        var config = {\r\n            type: 'line',\r\n            data: {\r\n                labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\",\r\n                    \"January\", \"February\", \"March\", \"April\"\r\n                ],\r\n                datasets: [{\r\n                    label: \"Sales Stats\",\r\n                    borderColor: mUtil.getColor('brand'),\r\n                    borderWidth: 2,\r\n                    pointBackgroundColor: mUtil.getColor('brand'),\r\n\r\n                    backgroundColor: mUtil.getColor('accent'),\r\n\r\n                    pointHoverBackgroundColor: mUtil.getColor('danger'),\r\n                    pointHoverBorderColor: Chart.helpers.color(mUtil.getColor('danger')).alpha(0.2).rgbString(),\r\n                    data: [\r\n                        10, 20, 16,\r\n                        18, 12, 40,\r\n                        35, 30, 33,\r\n                        34, 45, 40,\r\n                        60, 55, 70,\r\n                        65, 75, 62\r\n                    ]\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: false,\r\n                },\r\n                tooltips: {\r\n                    intersect: false,\r\n                    mode: 'nearest',\r\n                    xPadding: 10,\r\n                    yPadding: 10,\r\n                    caretPadding: 10\r\n                },\r\n                legend: {\r\n                    display: false,\r\n                    labels: {\r\n                        usePointStyle: false\r\n                    }\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                hover: {\r\n                    mode: 'index'\r\n                },\r\n                scales: {\r\n                    xAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Month'\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Value'\r\n                        }\r\n                    }]\r\n                },\r\n\r\n                elements: {\r\n                    point: {\r\n                        radius: 3,\r\n                        borderWidth: 0,\r\n\r\n                        hoverRadius: 8,\r\n                        hoverBorderWidth: 2\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        var chart = new Chart($('#m_chart_sales_stats'), config);\r\n    }\r\n\r\n    //== Sales By mUtillication Stats.\r\n    //** Based on Chartjs plugin - http://www.chartjs.org/\r\n    var salesByApps = function() {\r\n        // Init chart instances\r\n        _initSparklineChart($('#m_chart_sales_by_apps_1_1'), [10, 20, -5, 8, -20, -2, -4, 15, 5, 8], mUtil.getColor('accent'), 2);\r\n        _initSparklineChart($('#m_chart_sales_by_apps_1_2'), [2, 16, 0, 12, 22, 5, -10, 5, 15, 2], mUtil.getColor('danger'), 2);\r\n        _initSparklineChart($('#m_chart_sales_by_apps_1_3'), [15, 5, -10, 5, 16, 22, 6, -6, -12, 5], mUtil.getColor('success'), 2);\r\n        _initSparklineChart($('#m_chart_sales_by_apps_1_4'), [8, 18, -12, 12, 22, -2, -14, 16, 18, 2], mUtil.getColor('warning'), 2);\r\n\r\n        _initSparklineChart($('#m_chart_sales_by_apps_2_1'), [10, 20, -5, 8, -20, -2, -4, 15, 5, 8], mUtil.getColor('danger'), 2);\r\n        _initSparklineChart($('#m_chart_sales_by_apps_2_2'), [2, 16, 0, 12, 22, 5, -10, 5, 15, 2], mUtil.getColor('metal'), 2);\r\n        _initSparklineChart($('#m_chart_sales_by_apps_2_3'), [15, 5, -10, 5, 16, 22, 6, -6, -12, 5], mUtil.getColor('brand'), 2);\r\n        _initSparklineChart($('#m_chart_sales_by_apps_2_4'), [8, 18, -12, 12, 22, -2, -14, 16, 18, 2], mUtil.getColor('info'), 2);\r\n    }\r\n\r\n    //== Latest Updates.\r\n    //** Based on Chartjs plugin - http://www.chartjs.org/\r\n    var latestUpdates = function() {\r\n        if ($('#m_chart_latest_updates').length == 0) {\r\n            return;\r\n        }\r\n\r\n        var ctx = document.getElementById(\"m_chart_latest_updates\").getContext(\"2d\");\r\n\r\n        var config = {\r\n            type: 'line',\r\n            data: {\r\n                labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\"],\r\n                datasets: [{\r\n                    label: \"Sales Stats\",\r\n                    backgroundColor: mUtil.getColor('danger'), // Put the gradient here as a fill color\r\n                    borderColor: mUtil.getColor('danger'),\r\n                    pointBackgroundColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n                    pointBorderColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n                    pointHoverBackgroundColor: mUtil.getColor('accent'),\r\n                    pointHoverBorderColor: Chart.helpers.color('#000000').alpha(0.1).rgbString(),\r\n\r\n                    //fill: 'start',\r\n                    data: [\r\n                        10, 14, 12, 16, 9, 11, 13, 9, 13, 15\r\n                    ]\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: false,\r\n                },\r\n                tooltips: {\r\n                    intersect: false,\r\n                    mode: 'nearest',\r\n                    xPadding: 10,\r\n                    yPadding: 10,\r\n                    caretPadding: 10\r\n                },\r\n                legend: {\r\n                    display: false\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                hover: {\r\n                    mode: 'index'\r\n                },\r\n                scales: {\r\n                    xAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Month'\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Value'\r\n                        },\r\n                        ticks: {\r\n                            beginAtZero: true\r\n                        }\r\n                    }]\r\n                },\r\n                elements: {\r\n                    line: {\r\n                        tension: 0.0000001\r\n                    },\r\n                    point: {\r\n                        radius: 4,\r\n                        borderWidth: 12\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        var chart = new Chart(ctx, config);\r\n    }\r\n\r\n    //== Trends Stats.\r\n    //** Based on Chartjs plugin - http://www.chartjs.org/\r\n    var trendsStats = function() {\r\n        if ($('#m_chart_trends_stats').length == 0) {\r\n            return;\r\n        }\r\n\r\n        var ctx = document.getElementById(\"m_chart_trends_stats\").getContext(\"2d\");\r\n\r\n        var gradient = ctx.createLinearGradient(0, 0, 0, 240);\r\n        gradient.addColorStop(0, Chart.helpers.color('#00c5dc').alpha(0.7).rgbString());\r\n        gradient.addColorStop(1, Chart.helpers.color('#f2feff').alpha(0).rgbString());\r\n\r\n        var config = {\r\n            type: 'line',\r\n            data: {\r\n                labels: [\r\n                    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\r\n                    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\r\n                    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\r\n                    \"January\", \"February\", \"March\", \"April\"\r\n                ],\r\n                datasets: [{\r\n                    label: \"Sales Stats\",\r\n                    backgroundColor: gradient, // Put the gradient here as a fill color\r\n                    borderColor: '#0dc8de',\r\n\r\n                    pointBackgroundColor: Chart.helpers.color('#ffffff').alpha(0).rgbString(),\r\n                    pointBorderColor: Chart.helpers.color('#ffffff').alpha(0).rgbString(),\r\n                    pointHoverBackgroundColor: mUtil.getColor('danger'),\r\n                    pointHoverBorderColor: Chart.helpers.color('#000000').alpha(0.2).rgbString(),\r\n\r\n                    //fill: 'start',\r\n                    data: [\r\n                        20, 10, 18, 15, 26, 18, 15, 22, 16, 12,\r\n                        12, 13, 10, 18, 14, 24, 16, 12, 19, 21,\r\n                        16, 14, 21, 21, 13, 15, 22, 24, 21, 11,\r\n                        14, 19, 21, 17\r\n                    ]\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: false,\r\n                },\r\n                tooltips: {\r\n                    intersect: false,\r\n                    mode: 'nearest',\r\n                    xPadding: 10,\r\n                    yPadding: 10,\r\n                    caretPadding: 10\r\n                },\r\n                legend: {\r\n                    display: false\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                hover: {\r\n                    mode: 'index'\r\n                },\r\n                scales: {\r\n                    xAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Month'\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Value'\r\n                        },\r\n                        ticks: {\r\n                            beginAtZero: true\r\n                        }\r\n                    }]\r\n                },\r\n                elements: {\r\n                    line: {\r\n                        tension: 0.19\r\n                    },\r\n                    point: {\r\n                        radius: 4,\r\n                        borderWidth: 12\r\n                    }\r\n                },\r\n                layout: {\r\n                    padding: {\r\n                        left: 0,\r\n                        right: 0,\r\n                        top: 5,\r\n                        bottom: 0\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        var chart = new Chart(ctx, config);\r\n    }\r\n\r\n    //== Trends Stats 2.\r\n    //** Based on Chartjs plugin - http://www.chartjs.org/\r\n    var trendsStats2 = function() {\r\n        if ($('#m_chart_trends_stats_2').length == 0) {\r\n            return;\r\n        }\r\n\r\n        var ctx = document.getElementById(\"m_chart_trends_stats_2\").getContext(\"2d\");\r\n\r\n        var config = {\r\n            type: 'line',\r\n            data: {\r\n                labels: [\r\n                    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\r\n                    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\r\n                    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\r\n                    \"January\", \"February\", \"March\", \"April\"\r\n                ],\r\n                datasets: [{\r\n                    label: \"Sales Stats\",\r\n                    backgroundColor: '#d2f5f9', // Put the gradient here as a fill color\r\n                    borderColor: mUtil.getColor('brand'),\r\n\r\n                    pointBackgroundColor: Chart.helpers.color('#ffffff').alpha(0).rgbString(),\r\n                    pointBorderColor: Chart.helpers.color('#ffffff').alpha(0).rgbString(),\r\n                    pointHoverBackgroundColor: mUtil.getColor('danger'),\r\n                    pointHoverBorderColor: Chart.helpers.color('#000000').alpha(0.2).rgbString(),\r\n\r\n                    //fill: 'start',\r\n                    data: [\r\n                        20, 10, 18, 15, 32, 18, 15, 22, 8, 6,\r\n                        12, 13, 10, 18, 14, 24, 16, 12, 19, 21,\r\n                        16, 14, 24, 21, 13, 15, 27, 29, 21, 11,\r\n                        14, 19, 21, 17\r\n                    ]\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: false,\r\n                },\r\n                tooltips: {\r\n                    intersect: false,\r\n                    mode: 'nearest',\r\n                    xPadding: 10,\r\n                    yPadding: 10,\r\n                    caretPadding: 10\r\n                },\r\n                legend: {\r\n                    display: false\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                hover: {\r\n                    mode: 'index'\r\n                },\r\n                scales: {\r\n                    xAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Month'\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Value'\r\n                        },\r\n                        ticks: {\r\n                            beginAtZero: true\r\n                        }\r\n                    }]\r\n                },\r\n                elements: {\r\n                    line: {\r\n                        tension: 0.19\r\n                    },\r\n                    point: {\r\n                        radius: 4,\r\n                        borderWidth: 12\r\n                    }\r\n                },\r\n                layout: {\r\n                    padding: {\r\n                        left: 0,\r\n                        right: 0,\r\n                        top: 5,\r\n                        bottom: 0\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        var chart = new Chart(ctx, config);\r\n    }\r\n\r\n    //== Trends Stats.\r\n    //** Based on Chartjs plugin - http://www.chartjs.org/\r\n    var latestTrendsMap = function() {\r\n        if ($('#m_chart_latest_trends_map').length == 0) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            var map = new GMaps({\r\n                div: '#m_chart_latest_trends_map',\r\n                lat: -12.043333,\r\n                lng: -77.028333\r\n            });\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    //== Revenue Change.\r\n    //** Based on Morris plugin - http://morrisjs.github.io/morris.js/\r\n    var revenueChange = function() {\r\n        if ($('#m_chart_revenue_change').length == 0) {\r\n            return;\r\n        }\r\n\r\n        Morris.Donut({\r\n            element: 'm_chart_revenue_change',\r\n            data: [{\r\n                    label: \"New York\",\r\n                    value: 10\r\n                },\r\n                {\r\n                    label: \"London\",\r\n                    value: 7\r\n                },\r\n                {\r\n                    label: \"Paris\",\r\n                    value: 20\r\n                }\r\n            ],\r\n            colors: [\r\n                mUtil.getColor('accent'),\r\n                mUtil.getColor('danger'),\r\n                mUtil.getColor('brand')\r\n            ],\r\n        });\r\n    }\r\n\r\n    //== Support Tickets Chart.\r\n    //** Based on Morris plugin - http://morrisjs.github.io/morris.js/\r\n    var supportTickets = function() {\r\n        if ($('#m_chart_support_tickets').length == 0) {\r\n            return;\r\n        }\r\n\r\n        Morris.Donut({\r\n            element: 'm_chart_support_tickets',\r\n            data: [{\r\n                    label: \"Margins\",\r\n                    value: 20\r\n                },\r\n                {\r\n                    label: \"Profit\",\r\n                    value: 70\r\n                },\r\n                {\r\n                    label: \"Lost\",\r\n                    value: 10\r\n                }\r\n            ],\r\n            labelColor: '#a7a7c2',\r\n            colors: [\r\n                mUtil.getColor('accent'),\r\n                mUtil.getColor('brand'),\r\n                mUtil.getColor('danger')\r\n            ]\r\n            //formatter: function (x) { return x + \"%\"}\r\n        });\r\n    }\r\n\r\n    //== Support Tickets Chart.\r\n    //** Based on Morris plugin - http://morrisjs.github.io/morris.js/\r\n    var supportTickets2 = function() {\r\n        if ($('#m_chart_support_tickets2').length == 0) {\r\n            return;\r\n        }\r\n\r\n        var chart = new Chartist.Pie('#m_chart_support_tickets2', {\r\n            series: [{\r\n                    value: 32,\r\n                    className: 'custom',\r\n                    meta: {\r\n                        color: mUtil.getColor('brand')\r\n                    }\r\n                },\r\n                {\r\n                    value: 32,\r\n                    className: 'custom',\r\n                    meta: {\r\n                        color: mUtil.getColor('accent')\r\n                    }\r\n                },\r\n                {\r\n                    value: 36,\r\n                    className: 'custom',\r\n                    meta: {\r\n                        color: mUtil.getColor('warning')\r\n                    }\r\n                }\r\n            ],\r\n            labels: [1, 2, 3]\r\n        }, {\r\n            donut: true,\r\n            donutWidth: 17,\r\n            showLabel: false\r\n        });\r\n\r\n        chart.on('draw', function(data) {\r\n            if (data.type === 'slice') {\r\n                // Get the total path length in order to use for dash array animation\r\n                var pathLength = data.element._node.getTotalLength();\r\n\r\n                // Set a dasharray that matches the path length as prerequisite to animate dashoffset\r\n                data.element.attr({\r\n                    'stroke-dasharray': pathLength + 'px ' + pathLength + 'px'\r\n                });\r\n\r\n                // Create animation definition while also assigning an ID to the animation for later sync usage\r\n                var animationDefinition = {\r\n                    'stroke-dashoffset': {\r\n                        id: 'anim' + data.index,\r\n                        dur: 1000,\r\n                        from: -pathLength + 'px',\r\n                        to: '0px',\r\n                        easing: Chartist.Svg.Easing.easeOutQuint,\r\n                        // We need to use `fill: 'freeze'` otherwise our animation will fall back to initial (not visible)\r\n                        fill: 'freeze',\r\n                        'stroke': data.meta.color\r\n                    }\r\n                };\r\n\r\n                // If this was not the first slice, we need to time the animation so that it uses the end sync event of the previous animation\r\n                if (data.index !== 0) {\r\n                    animationDefinition['stroke-dashoffset'].begin = 'anim' + (data.index - 1) + '.end';\r\n                }\r\n\r\n                // We need to set an initial value before the animation starts as we are not in guided mode which would do that for us\r\n\r\n                data.element.attr({\r\n                    'stroke-dashoffset': -pathLength + 'px',\r\n                    'stroke': data.meta.color\r\n                });\r\n\r\n                // We can't use guided mode as the animations need to rely on setting begin manually\r\n                // See http://gionkunz.github.io/chartist-js/api-documentation.html#chartistsvg-function-animate\r\n                data.element.animate(animationDefinition, false);\r\n            }\r\n        });\r\n    }\r\n\r\n    //== Activities Charts.\r\n    //** Based on Chartjs plugin - http://www.chartjs.org/\r\n    var activitiesChart = function() {\r\n        if ($('#m_chart_activities').length == 0) {\r\n            return;\r\n        }\r\n\r\n        var ctx = document.getElementById(\"m_chart_activities\").getContext(\"2d\");\r\n\r\n        var gradient = ctx.createLinearGradient(0, 0, 0, 240);\r\n        gradient.addColorStop(0, Chart.helpers.color('#e14c86').alpha(1).rgbString());\r\n        gradient.addColorStop(1, Chart.helpers.color('#e14c86').alpha(0.3).rgbString());\r\n\r\n        var config = {\r\n            type: 'line',\r\n            data: {\r\n                labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\"],\r\n                datasets: [{\r\n                    label: \"Sales Stats\",\r\n                    backgroundColor: gradient,\r\n                    borderColor: '#e13a58',\r\n\r\n                    pointBackgroundColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n                    pointBorderColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n                    pointHoverBackgroundColor: mUtil.getColor('light'),\r\n                    pointHoverBorderColor: Chart.helpers.color('#ffffff').alpha(0.1).rgbString(),\r\n\r\n                    //fill: 'start',\r\n                    data: [\r\n                        10, 14, 12, 16, 9, 11, 13, 9, 13, 15\r\n                    ]\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: false,\r\n                },\r\n                tooltips: {\r\n                    mode: 'nearest',\r\n                    intersect: false,\r\n                    position: 'nearest',\r\n                    xPadding: 10,\r\n                    yPadding: 10,\r\n                    caretPadding: 10\r\n                },\r\n                legend: {\r\n                    display: false\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                    xAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Month'\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Value'\r\n                        },\r\n                        ticks: {\r\n                            beginAtZero: true\r\n                        }\r\n                    }]\r\n                },\r\n                elements: {\r\n                    line: {\r\n                        tension: 0.0000001\r\n                    },\r\n                    point: {\r\n                        radius: 4,\r\n                        borderWidth: 12\r\n                    }\r\n                },\r\n                layout: {\r\n                    padding: {\r\n                        left: 0,\r\n                        right: 0,\r\n                        top: 10,\r\n                        bottom: 0\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        var chart = new Chart(ctx, config);\r\n    }\r\n\r\n    //== Bandwidth Charts 1.\r\n    //** Based on Chartjs plugin - http://www.chartjs.org/\r\n    var bandwidthChart1 = function() {\r\n        if ($('#m_chart_bandwidth1').length == 0) {\r\n            return;\r\n        }\r\n\r\n        var ctx = document.getElementById(\"m_chart_bandwidth1\").getContext(\"2d\");\r\n\r\n        var gradient = ctx.createLinearGradient(0, 0, 0, 240);\r\n        gradient.addColorStop(0, Chart.helpers.color('#d1f1ec').alpha(1).rgbString());\r\n        gradient.addColorStop(1, Chart.helpers.color('#d1f1ec').alpha(0.3).rgbString());\r\n\r\n        var config = {\r\n            type: 'line',\r\n            data: {\r\n                labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\"],\r\n                datasets: [{\r\n                    label: \"Bandwidth Stats\",\r\n                    backgroundColor: gradient,\r\n                    borderColor: mUtil.getColor('success'),\r\n\r\n                    pointBackgroundColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n                    pointBorderColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n                    pointHoverBackgroundColor: mUtil.getColor('danger'),\r\n                    pointHoverBorderColor: Chart.helpers.color('#000000').alpha(0.1).rgbString(),\r\n\r\n                    //fill: 'start',\r\n                    data: [\r\n                        10, 14, 12, 16, 9, 11, 13, 9, 13, 15\r\n                    ]\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: false,\r\n                },\r\n                tooltips: {\r\n                    mode: 'nearest',\r\n                    intersect: false,\r\n                    position: 'nearest',\r\n                    xPadding: 10,\r\n                    yPadding: 10,\r\n                    caretPadding: 10\r\n                },\r\n                legend: {\r\n                    display: false\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                    xAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Month'\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Value'\r\n                        },\r\n                        ticks: {\r\n                            beginAtZero: true\r\n                        }\r\n                    }]\r\n                },\r\n                elements: {\r\n                    line: {\r\n                        tension: 0.0000001\r\n                    },\r\n                    point: {\r\n                        radius: 4,\r\n                        borderWidth: 12\r\n                    }\r\n                },\r\n                layout: {\r\n                    padding: {\r\n                        left: 0,\r\n                        right: 0,\r\n                        top: 10,\r\n                        bottom: 0\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        var chart = new Chart(ctx, config);\r\n    }\r\n\r\n    //== Bandwidth Charts 2.\r\n    //** Based on Chartjs plugin - http://www.chartjs.org/\r\n    var bandwidthChart2 = function() {\r\n        if ($('#m_chart_bandwidth2').length == 0) {\r\n            return;\r\n        }\r\n\r\n        var ctx = document.getElementById(\"m_chart_bandwidth2\").getContext(\"2d\");\r\n\r\n        var gradient = ctx.createLinearGradient(0, 0, 0, 240);\r\n        gradient.addColorStop(0, Chart.helpers.color('#ffefce').alpha(1).rgbString());\r\n        gradient.addColorStop(1, Chart.helpers.color('#ffefce').alpha(0.3).rgbString());\r\n\r\n        var config = {\r\n            type: 'line',\r\n            data: {\r\n                labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\"],\r\n                datasets: [{\r\n                    label: \"Bandwidth Stats\",\r\n                    backgroundColor: gradient,\r\n                    borderColor: mUtil.getColor('warning'),\r\n\r\n                    pointBackgroundColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n                    pointBorderColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n                    pointHoverBackgroundColor: mUtil.getColor('danger'),\r\n                    pointHoverBorderColor: Chart.helpers.color('#000000').alpha(0.1).rgbString(),\r\n\r\n                    //fill: 'start',\r\n                    data: [\r\n                        10, 14, 12, 16, 9, 11, 13, 9, 13, 15\r\n                    ]\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: false,\r\n                },\r\n                tooltips: {\r\n                    mode: 'nearest',\r\n                    intersect: false,\r\n                    position: 'nearest',\r\n                    xPadding: 10,\r\n                    yPadding: 10,\r\n                    caretPadding: 10\r\n                },\r\n                legend: {\r\n                    display: false\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                    xAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Month'\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Value'\r\n                        },\r\n                        ticks: {\r\n                            beginAtZero: true\r\n                        }\r\n                    }]\r\n                },\r\n                elements: {\r\n                    line: {\r\n                        tension: 0.0000001\r\n                    },\r\n                    point: {\r\n                        radius: 4,\r\n                        borderWidth: 12\r\n                    }\r\n                },\r\n                layout: {\r\n                    padding: {\r\n                        left: 0,\r\n                        right: 0,\r\n                        top: 10,\r\n                        bottom: 0\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        var chart = new Chart(ctx, config);\r\n    }\r\n\r\n    //== Bandwidth Charts 2.\r\n    //** Based on Chartjs plugin - http://www.chartjs.org/\r\n    var adWordsStat = function() {\r\n        if ($('#m_chart_adwords_stats').length == 0) {\r\n            return;\r\n        }\r\n\r\n        var ctx = document.getElementById(\"m_chart_adwords_stats\").getContext(\"2d\");\r\n\r\n        var gradient = ctx.createLinearGradient(0, 0, 0, 240);\r\n        gradient.addColorStop(0, Chart.helpers.color('#ffefce').alpha(1).rgbString());\r\n        gradient.addColorStop(1, Chart.helpers.color('#ffefce').alpha(0.3).rgbString());\r\n\r\n        var config = {\r\n            type: 'line',\r\n            data: {\r\n                labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\"],\r\n                datasets: [{\r\n                    label: \"AdWord Clicks\",\r\n                    backgroundColor: mUtil.getColor('brand'),\r\n                    borderColor: mUtil.getColor('brand'),\r\n\r\n                    pointBackgroundColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n                    pointBorderColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n                    pointHoverBackgroundColor: mUtil.getColor('danger'),\r\n                    pointHoverBorderColor: Chart.helpers.color('#000000').alpha(0.1).rgbString(),\r\n                    data: [\r\n                        12, 16, 9, 18, 13, 12, 18, 12, 15, 17\r\n                    ]\r\n                }, {\r\n                    label: \"AdWords Views\",\r\n\r\n                    backgroundColor: mUtil.getColor('accent'),\r\n                    borderColor: mUtil.getColor('accent'),\r\n\r\n                    pointBackgroundColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n                    pointBorderColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n                    pointHoverBackgroundColor: mUtil.getColor('danger'),\r\n                    pointHoverBorderColor: Chart.helpers.color('#000000').alpha(0.1).rgbString(),\r\n                    data: [\r\n                        10, 14, 12, 16, 9, 11, 13, 9, 13, 15\r\n                    ]\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: false,\r\n                },\r\n                tooltips: {\r\n                    mode: 'nearest',\r\n                    intersect: false,\r\n                    position: 'nearest',\r\n                    xPadding: 10,\r\n                    yPadding: 10,\r\n                    caretPadding: 10\r\n                },\r\n                legend: {\r\n                    display: false\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                    xAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Month'\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        stacked: true,\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Value'\r\n                        },\r\n                        ticks: {\r\n                            beginAtZero: true\r\n                        }\r\n                    }]\r\n                },\r\n                elements: {\r\n                    line: {\r\n                        tension: 0.0000001\r\n                    },\r\n                    point: {\r\n                        radius: 4,\r\n                        borderWidth: 12\r\n                    }\r\n                },\r\n                layout: {\r\n                    padding: {\r\n                        left: 0,\r\n                        right: 0,\r\n                        top: 10,\r\n                        bottom: 0\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        var chart = new Chart(ctx, config);\r\n    }\r\n\r\n    //== Bandwidth Charts 2.\r\n    //** Based on Chartjs plugin - http://www.chartjs.org/\r\n    var financeSummary = function() {\r\n        if ($('#m_chart_finance_summary').length == 0) {\r\n            return;\r\n        }\r\n\r\n        var ctx = document.getElementById(\"m_chart_finance_summary\").getContext(\"2d\");\r\n\r\n        var config = {\r\n            type: 'line',\r\n            data: {\r\n                labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\"],\r\n                datasets: [{\r\n                    label: \"AdWords Views\",\r\n\r\n                    backgroundColor: mUtil.getColor('accent'),\r\n                    borderColor: mUtil.getColor('accent'),\r\n\r\n                    pointBackgroundColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n                    pointBorderColor: Chart.helpers.color('#000000').alpha(0).rgbString(),\r\n                    pointHoverBackgroundColor: mUtil.getColor('danger'),\r\n                    pointHoverBorderColor: Chart.helpers.color('#000000').alpha(0.1).rgbString(),\r\n                    data: [\r\n                        10, 14, 12, 16, 9, 11, 13, 9, 13, 15\r\n                    ]\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: false,\r\n                },\r\n                tooltips: {\r\n                    mode: 'nearest',\r\n                    intersect: false,\r\n                    position: 'nearest',\r\n                    xPadding: 10,\r\n                    yPadding: 10,\r\n                    caretPadding: 10\r\n                },\r\n                legend: {\r\n                    display: false\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                    xAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Month'\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        display: false,\r\n                        gridLines: false,\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Value'\r\n                        },\r\n                        ticks: {\r\n                            beginAtZero: true\r\n                        }\r\n                    }]\r\n                },\r\n                elements: {\r\n                    line: {\r\n                        tension: 0.0000001\r\n                    },\r\n                    point: {\r\n                        radius: 4,\r\n                        borderWidth: 12\r\n                    }\r\n                },\r\n                layout: {\r\n                    padding: {\r\n                        left: 0,\r\n                        right: 0,\r\n                        top: 10,\r\n                        bottom: 0\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        var chart = new Chart(ctx, config);\r\n    }\r\n\r\n    //== Quick Stat Charts\r\n    var quickStats = function() {\r\n        _initSparklineChart($('#m_chart_quick_stats_1'), [10, 14, 18, 11, 9, 12, 14, 17, 18, 14], mUtil.getColor('brand'), 3);\r\n        _initSparklineChart($('#m_chart_quick_stats_2'), [11, 12, 18, 13, 11, 12, 15, 13, 19, 15], mUtil.getColor('danger'), 3);\r\n        _initSparklineChart($('#m_chart_quick_stats_3'), [12, 12, 18, 11, 15, 12, 13, 16, 11, 18], mUtil.getColor('success'), 3);\r\n        _initSparklineChart($('#m_chart_quick_stats_4'), [11, 9, 13, 18, 13, 15, 14, 13, 18, 15], mUtil.getColor('accent'), 3);\r\n    }\r\n\r\n    var daterangepickerInit = function() {\r\n        if ($('#m_dashboard_daterangepicker').length == 0) {\r\n            return;\r\n        }\r\n\r\n        var picker = $('#m_dashboard_daterangepicker');\r\n        var start = moment();\r\n        var end = moment();\r\n\r\n        function cb(start, end, label) {\r\n            var title = '';\r\n            var range = '';\r\n\r\n            if ((end - start) < 100) {\r\n                title = 'Today:';\r\n                range = start.format('MMM D');\r\n            } else if (label == 'Yesterday') {\r\n                title = 'Yesterday:';\r\n                range = start.format('MMM D');\r\n            } else {\r\n                range = start.format('MMM D') + ' - ' + end.format('MMM D');\r\n            }\r\n\r\n            picker.find('.m-subheader__daterange-date').html(range);\r\n            picker.find('.m-subheader__daterange-title').html(title);\r\n        }\r\n\r\n        picker.daterangepicker({\r\n            startDate: start,\r\n            endDate: end,\r\n            opens: 'left',\r\n            ranges: {\r\n                'Today': [moment(), moment()],\r\n                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\r\n                'Last 7 Days': [moment().subtract(6, 'days'), moment()],\r\n                'Last 30 Days': [moment().subtract(29, 'days'), moment()],\r\n                'This Month': [moment().startOf('month'), moment().endOf('month')],\r\n                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]\r\n            }\r\n        }, cb);\r\n\r\n        cb(start, end, '');\r\n    }\r\n\r\n    var datatableLatestOrders = function() {\r\n        if ($('#m_datatable_latest_orders').length === 0) {\r\n            return;\r\n        }\r\n\r\n        var datatable = $('.m_datatable').mDatatable({\r\n            data: {\r\n                type: 'remote',\r\n                source: {\r\n                    read: {\r\n                        url: 'inc/api/datatables/demos/default.php'\r\n                    }\r\n                },\r\n                pageSize: 10,\r\n                saveState: {\r\n                    cookie: false,\r\n                    webstorage: true\r\n                },\r\n                serverPaging: true,\r\n                serverFiltering: true,\r\n                serverSorting: true\r\n            },\r\n\r\n            layout: {\r\n                theme: 'default',\r\n                class: '',\r\n                scroll: true,\r\n                height: 380,\r\n                footer: false\r\n            },\r\n\r\n            sortable: true,\r\n\r\n            filterable: false,\r\n\r\n            pagination: true,\r\n\r\n            columns: [{\r\n                field: \"RecordID\",\r\n                title: \"#\",\r\n                sortable: false,\r\n                width: 40,\r\n                selector: {\r\n                    class: 'm-checkbox--solid m-checkbox--brand'\r\n                },\r\n                textAlign: 'center'\r\n            }, {\r\n                field: \"OrderID\",\r\n                title: \"Order ID\",\r\n                sortable: 'asc',\r\n                filterable: false,\r\n                width: 150,\r\n                template: '{{OrderID}} - {{ShipCountry}}'\r\n            }, {\r\n                field: \"ShipName\",\r\n                title: \"Ship Name\",\r\n                width: 150,\r\n                responsive: {\r\n                    visible: 'lg'\r\n                }\r\n            }, {\r\n                field: \"ShipDate\",\r\n                title: \"Ship Date\"\r\n            }, {\r\n                field: \"Status\",\r\n                title: \"Status\",\r\n                width: 100,\r\n                // callback function support for column rendering\r\n                template: function(row) {\r\n                    var status = {\r\n                        1: {\r\n                            'title': 'Pending',\r\n                            'class': 'm-badge--brand'\r\n                        },\r\n                        2: {\r\n                            'title': 'Delivered',\r\n                            'class': ' m-badge--metal'\r\n                        },\r\n                        3: {\r\n                            'title': 'Canceled',\r\n                            'class': ' m-badge--primary'\r\n                        },\r\n                        4: {\r\n                            'title': 'Success',\r\n                            'class': ' m-badge--success'\r\n                        },\r\n                        5: {\r\n                            'title': 'Info',\r\n                            'class': ' m-badge--info'\r\n                        },\r\n                        6: {\r\n                            'title': 'Danger',\r\n                            'class': ' m-badge--danger'\r\n                        },\r\n                        7: {\r\n                            'title': 'Warning',\r\n                            'class': ' m-badge--warning'\r\n                        }\r\n                    };\r\n                    return '<span class=\"m-badge ' + status[row.Status].class + ' m-badge--wide\">' + status[row.Status].title + '</span>';\r\n                }\r\n            }, {\r\n                field: \"Type\",\r\n                title: \"Type\",\r\n                width: 100,\r\n                // callback function support for column rendering\r\n                template: function(row) {\r\n                    var status = {\r\n                        1: {\r\n                            'title': 'Online',\r\n                            'state': 'danger'\r\n                        },\r\n                        2: {\r\n                            'title': 'Retail',\r\n                            'state': 'primary'\r\n                        },\r\n                        3: {\r\n                            'title': 'Direct',\r\n                            'state': 'accent'\r\n                        }\r\n                    };\r\n                    return '<span class=\"m-badge m-badge--' + status[row.Type].state + ' m-badge--dot\"></span>&nbsp;<span class=\"m--font-bold m--font-' + status[row.Type].state + '\">' + status[row.Type].title + '</span>';\r\n                }\r\n            }, {\r\n                field: \"Actions\",\r\n                width: 110,\r\n                title: \"Actions\",\r\n                sortable: false,\r\n                overflow: 'visible',\r\n                template: function(row) {\r\n                    var dropup = (row.getDatatable().getPageSize() - row.getIndex()) <= 4 ? 'dropup' : '';\r\n\r\n                    return '\\\r\n                        <div class=\"dropdown ' + dropup + '\">\\\r\n                            <a href=\"#\" class=\"btn m-btn m-btn--hover-accent m-btn--icon m-btn--icon-only m-btn--pill\" data-toggle=\"dropdown\">\\\r\n                                <i class=\"la la-ellipsis-h\"></i>\\\r\n                            </a>\\\r\n                            <div class=\"dropdown-menu dropdown-menu-right\">\\\r\n                                <a class=\"dropdown-item\" href=\"#\"><i class=\"la la-edit\"></i> Edit Details</a>\\\r\n                                <a class=\"dropdown-item\" href=\"#\"><i class=\"la la-leaf\"></i> Update Status</a>\\\r\n                                <a class=\"dropdown-item\" href=\"#\"><i class=\"la la-print\"></i> Generate Report</a>\\\r\n                            </div>\\\r\n                        </div>\\\r\n                        <a href=\"#\" class=\"m-portlet__nav-link btn m-btn m-btn--hover-accent m-btn--icon m-btn--icon-only m-btn--pill\" title=\"Edit details\">\\\r\n                            <i class=\"la la-edit\"></i>\\\r\n                        </a>\\\r\n                        <a href=\"#\" class=\"m-portlet__nav-link btn m-btn m-btn--hover-danger m-btn--icon m-btn--icon-only m-btn--pill\" title=\"Delete\">\\\r\n                            <i class=\"la la-trash\"></i>\\\r\n                        </a>\\\r\n                    ';\r\n                }\r\n            }]\r\n        });\r\n    }\r\n\r\n    var calendarInit = function() {\r\n        if ($('#m_calendar').length === 0) {\r\n            return;\r\n        }\r\n        \r\n        var todayDate = moment().startOf('day');\r\n        var YM = todayDate.format('YYYY-MM');\r\n        var YESTERDAY = todayDate.clone().subtract(1, 'day').format('YYYY-MM-DD');\r\n        var TODAY = todayDate.format('YYYY-MM-DD');\r\n        var TOMORROW = todayDate.clone().add(1, 'day').format('YYYY-MM-DD');\r\n\r\n        $('#m_calendar').fullCalendar({\r\n            header: {\r\n                left: 'prev,next today',\r\n                center: 'title',\r\n                right: 'month,agendaWeek,agendaDay,listWeek'\r\n            },\r\n            editable: true,\r\n            eventLimit: true, // allow \"more\" link when too many events\r\n            navLinks: true,\r\n            defaultDate: moment('2017-09-15'),\r\n            events: [\r\n                {\r\n                    title: 'Meeting',\r\n                    start: moment('2017-08-28'),\r\n                    description: 'Lorem ipsum dolor sit incid idunt ut',\r\n                    className: \"m-fc-event--light m-fc-event--solid-warning\"\r\n                },\r\n                {\r\n                    title: 'Conference',                    \r\n                    description: 'Lorem ipsum dolor incid idunt ut labore',\r\n                    start: moment('2017-08-29T13:30:00'),\r\n                    end: moment('2017-08-29T17:30:00'),\r\n                    className: \"m-fc-event--accent\"\r\n                },\r\n                {\r\n                    title: 'Dinner',\r\n                    start: moment('2017-08-30'),\r\n                    description: 'Lorem ipsum dolor sit tempor incid',\r\n                    className: \"m-fc-event--light  m-fc-event--solid-danger\"\r\n                },\r\n                {\r\n                    title: 'All Day Event',\r\n                    start: moment('2017-09-01'),\r\n                    description: 'Lorem ipsum dolor sit incid idunt ut',\r\n                    className: \"m-fc-event--danger m-fc-event--solid-focus\"\r\n                },\r\n                {\r\n                    title: 'Reporting',                    \r\n                    description: 'Lorem ipsum dolor incid idunt ut labore',\r\n                    start: moment('2017-09-03T13:30:00'),\r\n                    end: moment('2017-09-04T17:30:00'),\r\n                    className: \"m-fc-event--accent\"\r\n                },\r\n                {\r\n                    title: 'Company Trip',\r\n                    start: moment('2017-09-05'),\r\n                    end: moment('2017-09-07'),\r\n                    description: 'Lorem ipsum dolor sit tempor incid',\r\n                    className: \"m-fc-event--primary\"\r\n                },\r\n                {\r\n                    title: 'ICT Expo 2017 - Product Release',\r\n                    start: moment('2017-09-09'),\r\n                    description: 'Lorem ipsum dolor sit tempor inci',\r\n                    className: \"m-fc-event--light m-fc-event--solid-primary\"\r\n                },\r\n                {\r\n                    title: 'Dinner',\r\n                    start: moment('2017-09-12'),\r\n                    description: 'Lorem ipsum dolor sit amet, conse ctetur'\r\n                },\r\n                {\r\n                    id: 999,\r\n                    title: 'Repeating Event',\r\n                    start: moment('2017-09-15T16:00:00'),\r\n                    description: 'Lorem ipsum dolor sit ncididunt ut labore',\r\n                    className: \"m-fc-event--danger\"\r\n                },\r\n                {\r\n                    id: 1000,\r\n                    title: 'Repeating Event',\r\n                    description: 'Lorem ipsum dolor sit amet, labore',\r\n                    start: moment('2017-09-18T19:00:00'),\r\n                },\r\n                {\r\n                    title: 'Conference',\r\n                    start: moment('2017-09-20T13:00:00'),\r\n                    end: moment('2017-09-21T19:00:00'),\r\n                    description: 'Lorem ipsum dolor eius mod tempor labore',\r\n                    className: \"m-fc-event--accent\"\r\n                },\r\n                {\r\n                    title: 'Meeting',\r\n                    start: moment('2017-09-11'),\r\n                    description: 'Lorem ipsum dolor eiu idunt ut labore'\r\n                },\r\n                {\r\n                    title: 'Lunch',\r\n                    start: moment('2017-09-18'),\r\n                    className: \"m-fc-event--info m-fc-event--solid-accent\",\r\n                    description: 'Lorem ipsum dolor sit amet, ut labore'\r\n                },\r\n                {\r\n                    title: 'Meeting',\r\n                    start: moment('2017-09-24'),\r\n                    className: \"m-fc-event--warning\",\r\n                    description: 'Lorem ipsum conse ctetur adipi scing'\r\n                },\r\n                {\r\n                    title: 'Happy Hour',\r\n                    start: moment('2017-09-24'),\r\n                    className: \"m-fc-event--light m-fc-event--solid-focus\",\r\n                    description: 'Lorem ipsum dolor sit amet, conse ctetur'\r\n                },\r\n                {\r\n                    title: 'Dinner',\r\n                    start: moment('2017-09-24'),\r\n                    className: \"m-fc-event--solid-focus m-fc-event--light\",\r\n                    description: 'Lorem ipsum dolor sit ctetur adipi scing'\r\n                },\r\n                {\r\n                    title: 'Birthday Party',\r\n                    start: moment('2017-09-24'),\r\n                    className: \"m-fc-event--primary\",\r\n                    description: 'Lorem ipsum dolor sit amet, scing'\r\n                },\r\n                {\r\n                    title: 'Company Event',\r\n                    start: moment('2017-09-24'),\r\n                    className: \"m-fc-event--danger\",\r\n                    description: 'Lorem ipsum dolor sit amet, scing'\r\n                },\r\n                {\r\n                    title: 'Click for Google',\r\n                    url: 'http://google.com/',\r\n                    start: moment('2017-09-26'),\r\n                    className: \"m-fc-event--solid-info m-fc-event--light\",\r\n                    description: 'Lorem ipsum dolor sit amet, labore'\r\n                }\r\n            ],\r\n\r\n            eventRender: function(event, element) {\r\n                if (element.hasClass('fc-day-grid-event')) {\r\n                    element.data('content', event.description);\r\n                    element.data('placement', 'top');\r\n                    mApp.initPopover(element);\r\n                } else if (element.hasClass('fc-time-grid-event')) {\r\n                    element.find('.fc-title').append('<div class=\"fc-description\">' + event.description + '</div>');\r\n                } else if (element.find('.fc-list-item-title').lenght !== 0) {\r\n                    element.find('.fc-list-item-title').append('<div class=\"fc-description\">' + event.description + '</div>');\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return {\r\n        //== Init demos\r\n        init: function() {\r\n            // init charts\r\n            dailySales();\r\n            profitShare();\r\n            salesStats();\r\n            salesByApps();\r\n            latestUpdates();\r\n            trendsStats();\r\n            trendsStats2();\r\n            latestTrendsMap();\r\n            revenueChange();\r\n            supportTickets();\r\n            supportTickets2();\r\n            activitiesChart();\r\n            bandwidthChart1();\r\n            bandwidthChart2();\r\n            adWordsStat();\r\n            financeSummary();\r\n            quickStats();\r\n\r\n            // init daterangepicker\r\n            daterangepickerInit();\r\n\r\n            // datatables\r\n            datatableLatestOrders();\r\n\r\n            // calendar\r\n            calendarInit();\r\n        }\r\n    };\r\n}();\r\n\r\n//== Class initialization on page load\r\njQuery(document).ready(function() {\r\n    Dashboard.init();\r\n});"],"file":"dashboard.js"}